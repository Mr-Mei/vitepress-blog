import{_ as l,l as h,q as p,u as i,x as a,U as k,a8 as t,Q as e}from"./chunks/framework.CKE_rnFj.js";const r="/assets/images/JS/%E8%BE%93%E5%87%BA%E8%AF%AD%E6%B3%95.png",E="/assets/images/JS/%E9%A1%B5%E9%9D%A2%E5%BC%B9%E5%87%BA%E8%AD%A6%E7%A4%BA%E6%A1%86.jpg",d="/assets/images/JS/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA.jpg",g="/assets/images/JS/%E5%BC%B9%E5%87%BA%E8%BE%93%E5%85%A5%E6%A1%86.jpg",o="/assets/images/JS/%E5%BC%B9%E5%87%BA%E7%A1%AE%E8%AE%A4%E6%A1%86.jpg",c="/assets/images/JS/%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%80%E4%B9%88.jpg",y="/assets/images/JS/%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC.jpg",u="/assets/images/JS/%E6%9B%B4%E6%96%B0%E5%8F%98%E9%87%8F.jpg",F="/assets/images/JS/%E5%8F%98%E9%87%8F%E7%9A%84%E6%9C%AC%E8%B4%A8.jpg",b="/assets/images/JS/%E5%B8%B8%E9%87%8F.jpg",v="/assets/images/JS/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.jpg",f=JSON.parse('{"title":"JS基础","description":"","frontmatter":{},"headers":[],"relativePath":"pages/前端/JS/JS基础.md","filePath":"pages/前端/JS/JS基础.md"}'),A={name:"pages/前端/JS/JS基础.md"};function C(D,s,m,B,q,_){const n=e("ArticleHeader");return h(),p("div",{"data-pagefind-body":!0},[s[0]||(s[0]=i("h1",{id:"js基础",tabindex:"-1"},[a("JS基础 "),i("a",{class:"header-anchor",href:"#js基础","aria-label":'Permalink to "JS基础"'},"​")],-1)),k(n,{readTime:"19",words:"5.5k",lastUpdated:"12/26/2024, 3:26:08 AM"}),s[1]||(s[1]=t(`<h2 id="一、javascript简介" tabindex="-1">一、JavaScript简介 <a class="header-anchor" href="#一、javascript简介" aria-label="Permalink to &quot;一、JavaScript简介&quot;">​</a></h2><h3 id="_1、javascript-是什么" tabindex="-1">1、JavaScript 是什么 <a class="header-anchor" href="#_1、javascript-是什么" aria-label="Permalink to &quot;1、JavaScript 是什么&quot;">​</a></h3><p>JavaScript 是一种运行在客户端（浏览器）的编程语言，实现人机交互效果</p><h3 id="_2、作用" tabindex="-1">2、作用 <a class="header-anchor" href="#_2、作用" aria-label="Permalink to &quot;2、作用&quot;">​</a></h3><ul><li>网页特效 (监听用户的一些行为让网页作出对应的反馈)</li><li>表单验证 (针对表单数据的合法性进行判断)</li><li>数据交互 (获取后台的数据, 渲染到前端)</li><li>服务端编程 (node.js)</li></ul><h3 id="_3、-javascript的组成" tabindex="-1">3、 JavaScript的组成 <a class="header-anchor" href="#_3、-javascript的组成" aria-label="Permalink to &quot;3、 JavaScript的组成&quot;">​</a></h3><p><strong>ECMAScript:</strong></p><p>规定了js基础语法核心知识。</p><ul><li>比如：变量、分支语句、循环语句、对象等等</li></ul><p><strong>Web APIs :</strong></p><ul><li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li><li>BOM 操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等等</li></ul><p><strong>权威网站： MDN</strong></p><p><strong>JavaScript权威网站：</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><h2 id="二、-javascript-书写位置" tabindex="-1">二、 JavaScript 书写位置 <a class="header-anchor" href="#二、-javascript-书写位置" aria-label="Permalink to &quot;二、 JavaScript 书写位置&quot;">​</a></h2><p>JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中.</p><h3 id="_1、内部-javascript" tabindex="-1">1、内部 JavaScript <a class="header-anchor" href="#_1、内部-javascript" aria-label="Permalink to &quot;1、内部 JavaScript&quot;">​</a></h3><p>直接写在html文件里，用script标签包住</p><p><strong>规范</strong>：script标签写在<code>&lt;/body&gt;</code>上面</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意:</p><blockquote><p>我们将 <code>&lt;script&gt;</code> 放在HTML文件的底部附近的原因是浏览器会按照代码在文件中的顺序加载 HTML。</p><p>如果先加载的 JavaScript 期望修改其下方的 HTML，那么它可能由于 HTML 尚未被加载而失效。</p><p>因此，将 JavaScript 代码放在 HTML页面的底部附近通常是最好的策略。</p></blockquote><h3 id="_2、-外部-javascript" tabindex="-1">2、 外部 JavaScript <a class="header-anchor" href="#_2、-外部-javascript" aria-label="Permalink to &quot;2、 外部 JavaScript&quot;">​</a></h3><p>代码写在以.js结尾的文件里</p><p>**语法：**通过script标签，引入到html页面中。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 2, 外部JS书写位置 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./my.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 中间不要写内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意:</p><blockquote><ol><li><p>script标签中间无需写代码，否则会被忽略！</p></li><li><p>外部JavaScript会使代码更加有序，更易于复用，且没有了脚本的混合，HTML 也会更加易读，因此这是个好的习惯。</p></li></ol></blockquote><h3 id="_3、内联-javascript" tabindex="-1">3、内联 JavaScript <a class="header-anchor" href="#_3、内联-javascript" aria-label="Permalink to &quot;3、内联 JavaScript&quot;">​</a></h3><p>代码写在标签内部</p><p><strong>语法：</strong></p><p>注意： 此处作为了解即可，但是后面vue框架会用这种模式</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 3， 内联Javascript --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(&#39;逗你玩&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击我月薪过万&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="三、javascript-的注释" tabindex="-1">三、JavaScript 的注释 <a class="header-anchor" href="#三、javascript-的注释" aria-label="Permalink to &quot;三、JavaScript 的注释&quot;">​</a></h2><h3 id="_1、单行注释" tabindex="-1">1、单行注释 <a class="header-anchor" href="#_1、单行注释" aria-label="Permalink to &quot;1、单行注释&quot;">​</a></h3><ul><li><strong>符号：</strong>//</li><li><strong>作用：</strong>// 右边这一行的代码会被忽略</li><li>**快捷键：**ctrl + /</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	// 这种是单行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	// 一次只能注释一行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 	// 可以重复注释</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2、-多行注释" tabindex="-1">2、 多行注释 <a class="header-anchor" href="#_2、-多行注释" aria-label="Permalink to &quot;2、 多行注释&quot;">​</a></h3><ul><li><strong>符号：</strong>/* */</li><li>**作用：*<em>在/</em> 和 */ 之间的所有内容都会被忽略</li><li>**快捷键：**shift + alt + A (可以在VScode里面修改默认快捷键)</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*  这种是多行注释的写法*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /*  有些可以任意换行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    多少行都可以 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="四、javascript的结束符" tabindex="-1">四、JavaScript的结束符 <a class="header-anchor" href="#四、javascript的结束符" aria-label="Permalink to &quot;四、JavaScript的结束符&quot;">​</a></h2><p><strong>作用：</strong> 使用英文的 <strong>;</strong> 代表语句结束</p><p><strong>实际情况：</strong> 实际开发中，可写可不写, 浏览器(JavaScript 引擎) 可以自动推断语句的结束位置</p><p><strong>现状：</strong> 在实际开发中，越来越多的人主张，书写 JavaScript 代码时省略结束符</p><p>**约定：**为了风格统一，结束符要么每句都写，要么每句都不写（按照团队要求.）</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">或者 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="五、输入和输出语法" tabindex="-1">五、输入和输出语法 <a class="header-anchor" href="#五、输入和输出语法" aria-label="Permalink to &quot;五、输入和输出语法&quot;">​</a></h2><p>输出和输入也可理解为人和计算机的交互，用户通过键盘、鼠标等向计算机输入信息，计算机处理后再展示结果给用户，这便是一次输入和输出的过程。</p><h3 id="_1、输出语法" tabindex="-1">1、输出语法 <a class="header-anchor" href="#_1、输出语法" aria-label="Permalink to &quot;1、输出语法&quot;">​</a></h3><p><strong>语法一: document.write - 向html页面输出内容</strong></p><p>**作用：**向body内输出内容</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;要输出的内容&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>**注意：**如果输出的内容写的是标签，也会被解析成网页元素, 如</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;h2&gt;h2我是二级标题&lt;/h2&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>页面输出的结果:</p><p><img src="`+r+`" alt="img"></p><p>后面渲染页面时会用到</p><p><strong>语法二 : alert -页面弹出警示框</strong></p><p>**作用：**页面弹出警告对话框</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好,JS&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+E+`" alt="img"></p><p><strong>语法三: console.log --控制台输出,程序员调试使用</strong></p><p>**作用：**控制台输出语法，程序员调试使用</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;控制台打印&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+d+`" alt="img"></p><h3 id="_2、-输入语法" tabindex="-1">2、 输入语法 <a class="header-anchor" href="#_2、-输入语法" aria-label="Permalink to &quot;2、 输入语法&quot;">​</a></h3><p><strong>语法一 : prompt ---弹出输入框</strong></p><p>**作用：**显示一个对话框，对话框中包含一条文字信息，用来提示用户输入文字</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+g+'" alt="img"></p><p><strong>语法二 : confirm---弹出确认框</strong></p><p>**作用：**在网页弹出一个确认框,让用户输入确认/取消, 二选一</p><div class="language-scss vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">confirm(&#39;你确认成年了吗?&#39;)</span></span></code></pre></div><p><img src="'+o+'" alt="img"></p><p><strong>JavaScript 代码执行顺序：</strong></p><ul><li>按HTML文档流顺序执行JavaScript代码</li><li><strong>alert() 和 prompt() 它们会跳过页面渲染先被执行</strong>（目前作为了解，后期讲解详细执行过程）</li></ul><h2 id="六、字面量" tabindex="-1">六、字面量 <a class="header-anchor" href="#六、字面量" aria-label="Permalink to &quot;六、字面量&quot;">​</a></h2><p>定义:在计算机科学中，字面量（literal）是在计算机中描述 事/物</p><p>比如：</p><blockquote><ol><li>我们工资是： 1000 此时 1000 就是 数字字面量</li><li>&#39;程序员&#39; 字符串字面量</li><li>[] 数组字面量 {} 对象字面量 等等</li></ol></blockquote><h2 id="七、变量" tabindex="-1">七、变量 <a class="header-anchor" href="#七、变量" aria-label="Permalink to &quot;七、变量&quot;">​</a></h2><h3 id="_1、变量是什么" tabindex="-1">1、变量是什么 <a class="header-anchor" href="#_1、变量是什么" aria-label="Permalink to &quot;1、变量是什么&quot;">​</a></h3><ul><li>白话：变量就是一个装东西的盒子。</li><li>通俗：变量是计算机中用来<strong>存储数据</strong>的“容器”，它可以让计算机变得有记忆。</li></ul><p><img src="'+c+'" alt="img"></p><p>使用场景:<strong>存储数据</strong></p><p><strong>注意：变量不是数据本身，它们仅仅是一个用于存储数值的容器。可以理解为是一个个用来装东西的纸箱子。</strong></p><h3 id="_2、变量的基本使用" tabindex="-1">2、变量的基本使用 <a class="header-anchor" href="#_2、变量的基本使用" aria-label="Permalink to &quot;2、变量的基本使用&quot;">​</a></h3><h4 id="_2-1-声明变量" tabindex="-1">2.1 <strong>声明变量</strong> <a class="header-anchor" href="#_2-1-声明变量" aria-label="Permalink to &quot;2.1 **声明变量**&quot;">​</a></h4><p>要想使用变量，首先需要创建变量（也称为声明变量或者定义变量）</p><p><strong>语法:</strong></p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let  变量名</span></span></code></pre></div><ul><li>声明变量由两部分构成：声明关键字、变量名（标识）</li><li>let 即关键字 (let: 允许、许可、让、要)，所谓关键字是系统提供的专门用来声明（定义）变量的词语</li></ul><p><strong>举例</strong>:</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">let  age</span></span></code></pre></div><ul><li>我们声明了一个age变量</li><li>age 即变量的名称，也叫标识符</li></ul><h4 id="_2-2-变量赋值" tabindex="-1">2.2 变量赋值 <a class="header-anchor" href="#_2-2-变量赋值" aria-label="Permalink to &quot;2.2 变量赋值&quot;">​</a></h4><p>定义了一个变量后，你就能够初始化它（赋值）。在变量名之后跟上一个“=”，然后是数值。</p><p><img src="'+y+`" alt="img"></p><p><strong>注意</strong>：是通过变量名来获得变量里面的数据</p><p>简单点，也可以声明变量的时候直接完成赋值操作,这种操作也称为 变量<strong>初始化</strong>。</p><div class="language-cobol vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cobol</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 声明了一个age变量,同时里面存放了</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这个数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	let age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">script</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h4 id="_2-3-更新变量" tabindex="-1">2.3 更新变量 <a class="header-anchor" href="#_2-3-更新变量" aria-label="Permalink to &quot;2.3 更新变量&quot;">​</a></h4><p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 声明了一个age变量,同时里面存放了18 这个数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 变量里面的数据发生变化,更改为19</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 页面的输出结果为19</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+u+`" alt="img"></p><p><strong>注意： let 不允许多次声明一个变量。</strong></p><h4 id="_2-4-声明多个变量" tabindex="-1">2.4 声明多个变量 <a class="header-anchor" href="#_2-4-声明多个变量" aria-label="Permalink to &quot;2.4 声明多个变量&quot;">​</a></h4><p>变量赋值后，还可以通过简单地给它一个不同的值来更新它。</p><p>**语法：**多个变量中间用逗号隔开。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小书生&#39;</span></span></code></pre></div><p><strong>说明：<strong>看上去代码长度更短，但并</strong>不推荐</strong>这样。为了更好的可读性，请一行只声明一个变量。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多行变量声明有点长,但更容易阅读</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小书生&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age,uname)</span></span></code></pre></div><h3 id="_3、变量的本质" tabindex="-1">3、变量的本质 <a class="header-anchor" href="#_3、变量的本质" aria-label="Permalink to &quot;3、变量的本质&quot;">​</a></h3><p>**内存：**计算机中存储数据的地方，相当于一个空间</p><p>**变量本质：**是程序在内存中申请的一块用来存放数据的小空间</p><p><img src="`+F+`" alt="img"></p><h3 id="_4、变量的命名规则与规范" tabindex="-1">4、变量的命名规则与规范 <a class="header-anchor" href="#_4、变量的命名规则与规范" aria-label="Permalink to &quot;4、变量的命名规则与规范&quot;">​</a></h3><p>**规则：**必须遵守，不遵守报错 (法律层面)</p><p>**规范：**建议，不遵守不会报错，但不符合业内通识 （道德层面）</p><h4 id="_4-1-规则" tabindex="-1">4.1 <strong>规则：</strong> <a class="header-anchor" href="#_4-1-规则" aria-label="Permalink to &quot;4.1 **规则：**&quot;">​</a></h4><blockquote><ul><li>不能用关键字</li><li>关键字：有特殊含义的字符，JavaScript 内置的一些英语词汇。例如：let、var、const、if、for等</li><li>只能用下划线、字母、数字、$组成，且数字不能开头</li><li>字母严格区分大小写，如 Age 和 age 是不同的变量</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li></ul></blockquote><p><strong>注：所谓关键字是指 JavaScript 内部使用的词语，如</strong> <strong><code>let</code></strong> <strong>和 var 和 const，保留字是指 JavaScript 内部目前没有使用的词语，但是将来可能会使用词语。</strong></p><h4 id="_4-2-规范" tabindex="-1">4.2 规范 <a class="header-anchor" href="#_4-2-规范" aria-label="Permalink to &quot;4.2 规范&quot;">​</a></h4><blockquote><ul><li>起名要有意义</li><li>遵守小驼峰命名法</li><li>第一个单词首字母小写，后面每个单词首字母大写。例：userNam</li></ul></blockquote><p><strong>输出多个变量的写法(中间用逗号隔开):</strong></p><blockquote><p>document.write(变量名1, 变量名2, 变量名3)</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的年龄&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入您的性别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uname, age, gender)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_5、-let、const和var的区别" tabindex="-1">5、 let、const和var的区别 <a class="header-anchor" href="#_5、-let、const和var的区别" aria-label="Permalink to &quot;5、 let、const和var的区别&quot;">​</a></h3><p><strong>let、cosnt 和 var 区别：</strong></p><p>在较旧的JavaScript，使用关键字 var 来声明变量 ，而不是 let或者const。</p><p>var 现在开发中一般不再使用它，只是我们可能在老版程序中看到它。</p><p><strong>var 声明不合理的地方:</strong></p><blockquote><ul><li>可以先使用 在声明 (不合理)</li><li>var 声明过的变量可以重复声明(不合理)</li><li>比如变量提升、全局变量、没有块级作用域等等</li></ul></blockquote><p>let、var、const是JavaScript中声明变量的三种方式，它们的主要区别在于变量的作用域和可变性。</p><ol><li>var：var是最早的声明变量的方式，它在全局和函数作用域</li></ol><p>中均有效。定义一个变量后，可以随时修改它的值。但是它的局部变量存在变量声明提升的情况，即变量可以在声明之前使用，如果没有在函数内部使用var声明</p><p>变量，则其默认是全局变量。</p><ol start="2"><li>let：let是ES6中引入的一种声明变量的方式。它可以在块级作用域（即{}内部）中定义局部变量。let不允许重复声明同一变量，</li></ol><p>且在定义后才可使用，不存在变量声明提升的情况。另外，let声明的变量可以被修改。</p><ol start="3"><li>const：const定义的是一个常量，它的值不可以被修改，一旦定义，便</li></ol><p>不可更改。const具有块级作用域，所以它也不能被重复定义。 综上所述，var、let、const这三种变量声明方式在作用域和可变性上存在区别。在实际开发中，</p><p>应根据变量的使用场景来选择不同的声明方式，以便更好地掌控变量的作用域和可变性。</p><h3 id="_6-、变量拓展-数组" tabindex="-1">6 、变量拓展-数组 <a class="header-anchor" href="#_6-、变量拓展-数组" aria-label="Permalink to &quot;6 、变量拓展-数组&quot;">​</a></h3><p>数组 (Array) —— 一种将 <strong>一组数据存储在单个变量名下</strong> 的优雅方式</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小书生&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;刘德华&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张学友&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;黎明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>使用方法:</strong></p><h4 id="_1-声明数组" tabindex="-1">1. 声明数组 <a class="header-anchor" href="#_1-声明数组" aria-label="Permalink to &quot;1. 声明数组&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 数组名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [数据1, 数据2, 数据3, 数据4]</span></span></code></pre></div><blockquote><ul><li>数组是按顺序保存，所以每个数据都有自己的编号</li><li>计算机中的编号从0开始，所以小明的编号为0，小刚编号为1，以此类推</li><li>在数组中，数据的编号也叫<strong>索引或下标</strong></li><li>数组可以存储任意类型的数据</li><li>数组名可以更改</li></ul></blockquote><h4 id="_2-使用数组-数组名-索引号-也叫下标" tabindex="-1">2. 使用数组 -- 数组名[索引号/(也叫下标)] <a class="header-anchor" href="#_2-使用数组-数组名-索引号-也叫下标" aria-label="Permalink to &quot;2. 使用数组   -- 数组名[索引号/(也叫下标)]&quot;">​</a></h4><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数组名 [下标]</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小书生&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;刘德华&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张学友&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;黎明&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//小书生</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//黎明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小书生</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 张学友</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 刘德华</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span></code></pre></div><blockquote><ul><li>通过下标取数据, 数组的索引号(下标)从0开始</li><li>取出来是什么类型的，就根据这种类型特点来访问</li></ul></blockquote><h4 id="_3-一些术语" tabindex="-1">3. 一些术语 <a class="header-anchor" href="#_3-一些术语" aria-label="Permalink to &quot;3. 一些术语&quot;">​</a></h4><blockquote><ul><li>**元素：**数组中保存的每个数据都叫数组元素</li><li>**下标：**数组中数据的编号</li><li>**长度：**数组中数据的个数，通过数组的length属性获得, <strong>数组长度=下标(索引号)+1</strong></li></ul></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let arr = [&#39;小书生&#39;, &#39;刘德华&#39;, &#39;张学友&#39;, &#39;黎明&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    document.write(arr[3]) //黎明</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(arr.length) //4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  const G = 9.8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.log(G)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="八、常量" tabindex="-1">八、常量 <a class="header-anchor" href="#八、常量" aria-label="Permalink to &quot;八、常量&quot;">​</a></h2><ul><li>**概念：**使用 <strong>const</strong> 声明的变量称为“常量”。</li><li><strong>使用场景：<strong>当某个变量永远</strong>不会改变</strong>的时候，就可以使用 const 来声明，而不是let。</li><li>**命名规范：**和变量一致</li><li><strong>常量使用:</strong></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const G = 9.8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	  console.log(G)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+b+'" alt="img"></p><p><strong>注意：</strong> 常量不允许重新赋值，声明的时候必须赋值（初始化）</p><p>**小技巧：**不需要重新赋值的数据使用const</p><p><strong>总结:</strong></p><blockquote><p>let —现在实际开发变量声明方式。</p><p>var —以前的声明变量的方式，会有很多问题。</p><p>const — 类似于 let ，但是变量的值无法被修改。</p></blockquote><h2 id="九、-数据类型" tabindex="-1">九、 数据类型 <a class="header-anchor" href="#九、-数据类型" aria-label="Permalink to &quot;九、 数据类型&quot;">​</a></h2><p>计算机程序可以处理大量的数据，为什么要给数据分类？</p><ol><li><p>更加充分和高效的利用内存</p></li><li><p>也更加方便程序员的使用数据</p></li></ol><p><img src="'+v+`" alt="img"></p><h3 id="_1、分类" tabindex="-1">1、分类 <a class="header-anchor" href="#_1、分类" aria-label="Permalink to &quot;1、分类&quot;">​</a></h3><h4 id="_1-1-基本数据类型" tabindex="-1">1.1 基本数据类型 <a class="header-anchor" href="#_1-1-基本数据类型" aria-label="Permalink to &quot;1.1 基本数据类型&quot;">​</a></h4><blockquote><p>number 数字型</p><p>string 字符串型</p><p>boolean 布尔型</p><p>undefined 未定义型</p><p>null 空类型</p></blockquote><h5 id="_1-1-1-number-数字型" tabindex="-1">1.1.1 number 数字型 <a class="header-anchor" href="#_1-1-1-number-数字型" aria-label="Permalink to &quot;1.1.1 number 数字型&quot;">​</a></h5><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //整数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 88.99</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 小数</span></span></code></pre></div><p>JavaScript 中的正数、负数、小数等 统一称为 数字类型。</p><p><strong>注意</strong></p><blockquote><p>JS 是弱数据类型，变量到底属于那种类型，只有赋值之后，我们才能确认</p><p>Java是强数据类型 例如 int a = 3 必须是整数</p></blockquote><h6 id="_1-1-1-1-算术运算符" tabindex="-1"><strong>1.1.1.1 算术运算符</strong> <a class="header-anchor" href="#_1-1-1-1-算术运算符" aria-label="Permalink to &quot;**1.1.1.1 算术运算符**&quot;">​</a></h6><p>数字可以有很多操作，比如，乘法 * 、除法 / 、加法 + 、减法 - 等等，所以经常和算术运算符一起。</p><p>数学运算符也叫<strong>算术运算符</strong>，主要包括加、减、乘、除、取余（求模）。</p><blockquote><ul><li>+：求和</li><li>-：求差</li><li>*：求积</li><li>/：求商</li><li>%：取模（取余数）--- <strong>开发中经常作为某个数字是否被整除</strong></li></ul></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(1 + 1)   // 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(5 - 1)   // 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(2 * 3)   // 6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(6 / 4)   //  1.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(5 % 3)   // 求余数 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(3 % 5)   // 求余数 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h6 id="_1-1-1-2-优先级顺序" tabindex="-1"><strong>1.1.1.2 优先级顺序</strong> <a class="header-anchor" href="#_1-1-1-2-优先级顺序" aria-label="Permalink to &quot;**1.1.1.2 优先级顺序**&quot;">​</a></h6><p>JavaScript中 优先级越高越先被执行，优先级相同时以书从左向右执行。</p><blockquote><ul><li>乘、除、取余优先级相同</li><li>加、减优先级相同</li><li>乘、除、取余优先级大于加、减</li><li>使用 () 可以提升优先级</li><li>总结： 先乘除后加减，有括号先算括号里面的~~~</li></ul></blockquote><h6 id="_1-1-1-3-nan" tabindex="-1"><strong>1.1.1.3 NaN</strong> <a class="header-anchor" href="#_1-1-1-3-nan" aria-label="Permalink to &quot;**1.1.1.3 NaN**&quot;">​</a></h6><p>NaN 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小书生&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//控制台输出的结果: NaN .表示not a number</span></span></code></pre></div><p>NaN 是粘性的。任何对 NaN 的操作都会返回 NaN</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NaN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//控制台输出的结果: NaN</span></span></code></pre></div><h5 id="_1-1-2-字符串类型-string" tabindex="-1"><strong>1.1.2 字符串类型（string）</strong> <a class="header-anchor" href="#_1-1-2-字符串类型-string" aria-label="Permalink to &quot;**1.1.2 字符串类型（string）**&quot;">​</a></h5><p>通过单引号（ &#39;&#39;） 、双引号（ &quot;&quot;）或反引号( \` ) 包裹的数据都叫字符串，单引号和双引号没有本质上的区别，推荐使用单引号。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;小明&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //使用单引号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gender </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;男&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 使用双引号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> goods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`小米\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用反引号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;13681113456&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //看上去是数字,但是引号包裹了就是字符串</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 这种情况叫空字符串</span></span></code></pre></div><p><strong>注意事项：</strong></p><blockquote><ol><li><p>无论单引号或是双引号必须成对使用</p></li><li><p>单引号/双引号可以互相嵌套，但是不以自已嵌套自已（口诀：外双内单，或者外单内双）</p></li><li><p>必要时可以使用<strong>反引号和转义符</strong> (<strong>注意转义符的摆放位置</strong>)，输出单引号或双引号</p></li><li><p>反引号在键盘数字1的左边</p></li></ol></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我喜欢&quot;刘德华&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出  我喜欢&quot;刘德华&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我喜欢\`张韶涵\`&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出  我喜欢\`张韶涵\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我喜欢</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">张韶涵</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出  我喜欢&#39;张韶涵&#39;</span></span></code></pre></div><p><strong>获取字符串长度</strong> -.length可以获取字符串的长度(英文字母之间的空格和符号会算进去)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;my name is yc, I like cat&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str1.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 25</span></span></code></pre></div><h6 id="_1-1-2-1-字符串拼接" tabindex="-1"><strong>1.1.2.1 字符串拼接：</strong> <a class="header-anchor" href="#_1-1-2-1-字符串拼接" aria-label="Permalink to &quot;**1.1.2.1 字符串拼接：**&quot;">​</a></h6><blockquote><p><strong>场景</strong>一： + 运算符 可以实现字符串的拼接。</p><p>口诀：数字相加，字符相连</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我叫&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;刘德华&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//我叫刘德华</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;刘德华&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> song </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;忘情水&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> song) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 刘德华忘情水</span></span></code></pre></div><blockquote><p>**场景二：**拼接字符串和变量</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;刘德华&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> song </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;忘情水&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;大家好,我叫&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;,我喜欢的歌&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> song)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 大家好,我叫刘德华, 我喜欢的歌忘情水</span></span></code></pre></div>`,202)),s[2]||(s[2]=i("h6",{变量名:"",id:"_1-1-2-2-模板字符串-外面用反引号-里面用",tabindex:"-1"},[i("strong",null,"1.1.2.2 模板字符串"),a(" ----外面用反引号,里面用$ "),i("a",{class:"header-anchor",href:"#_1-1-2-2-模板字符串-外面用反引号-里面用","aria-label":'Permalink to "**1.1.2.2 模板字符串**  ----外面用反引号,里面用${变量名}"'},"​")],-1)),s[3]||(s[3]=t(`<p><strong>语法:</strong></p><blockquote><ul><li>\`\` (反引号) 把所有内容包起来,里面不需要在加其他的单引号或者双引号</li><li>在英文输入模式下按键盘的tab键上方那个键（1左边那个键）</li><li>内容拼接变量时，用 <strong>\${ }</strong> 包住变量</li></ul></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;刘德华&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> song </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;忘情水&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`大家好,我叫\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">},我喜欢的歌\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">song</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h5 id="_1-1-3-布尔类型-boolean" tabindex="-1"><strong>1.1.3 布尔类型（boolean）</strong> <a class="header-anchor" href="#_1-1-3-布尔类型-boolean" aria-label="Permalink to &quot;**1.1.3 布尔类型（boolean）**&quot;">​</a></h5><p>表示肯定或否定时在计算机中对应的是布尔类型数据。</p><p>它有两个固定的值 true 和 false，表示肯定的数据用 true（真），表示否定的数据用 false（假）。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    let isCool = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(isCool) // 输出 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.log(2 &gt; 3) //输出 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h5 id="_1-1-4-未定义类型-undefined" tabindex="-1"><strong>1.1.4 未定义类型（undefined）</strong> <a class="header-anchor" href="#_1-1-4-未定义类型-undefined" aria-label="Permalink to &quot;**1.1.4 未定义类型（undefined）**&quot;">​</a></h5><p>未定义是比较特殊的类型，只有一个值 undefined。</p><p><strong>什么情况出现未定义类型？</strong></p><p>只声明变量，不赋值的情况下，变量的默认值为 undefined，一般很少【直接】为某个变量赋值为 undefined。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//声明变量但是未赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 undefined</span></span></code></pre></div><p><strong>工作中的使用场景：</strong></p><blockquote><p>我们开发中经常声明一个变量，等待传送过来的数据。</p><p>如果我们不知道这个数据是否传递过来，此时我们可以通过检测这个变量是不是undefined，就判断用户是否有数据传递过来。</p></blockquote><h5 id="_1-1-5-null-空类型" tabindex="-1"><strong>1.1.5 null（空类型）</strong> <a class="header-anchor" href="#_1-1-5-null-空类型" aria-label="Permalink to &quot;**1.1.5 null（空类型）**&quot;">​</a></h5><p>JavaScript 中的 null 仅仅是一个代表“无”、“空”或“值未知”的特殊值</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //赋值了但是内容未空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 null</span></span></code></pre></div><p><strong>null 开发中的使用场景：</strong></p><blockquote><p>官方解释：把 null 作为尚未创建的对象</p><p>大白话： 将来有个变量里面存放的是一个对象，但是对象还没创建好，可以先给个null</p></blockquote><p><strong>null 和 undefined 区别：</strong></p><blockquote><p>undefined 表示没有赋值 (白话:买的期房,买了但是还没建)</p><p>null 表示赋值了，但是内容为空 (白话:买的毛坯房)</p><p>计算有区别:</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">undefined</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//结果是 NaN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//结果是  1</span></span></code></pre></div><h4 id="_1-2-引用数据类型-后续会重点介绍" tabindex="-1">1.2 引用数据类型 (后续会重点介绍) <a class="header-anchor" href="#_1-2-引用数据类型-后续会重点介绍" aria-label="Permalink to &quot;1.2 引用数据类型 (后续会重点介绍)&quot;">​</a></h4><blockquote><p>object 对象</p></blockquote><h3 id="_2、检测数据类型" tabindex="-1">2、检测数据类型 <a class="header-anchor" href="#_2、检测数据类型" aria-label="Permalink to &quot;2、检测数据类型&quot;">​</a></h3><p>控制台输出语句:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  18</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //数字型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;刘德华&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //字符串类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //布尔类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buy     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//未定义类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //空类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 18 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uname) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 刘德华</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(flag)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buy)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num1)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 object</span></span></code></pre></div><p>控制台语句经常用于测试结果来使用。</p><p>可以看出数字型和布尔型颜色为蓝色，字符串和undefined颜色为灰色</p><p><strong>方法: 通过typeof关键字检测数据类型</strong></p><p>typeof 运算符可以返回被检测的数据类型。它支持两种语法形式：</p><blockquote><ol><li><p>作为运算符： typeof x （常用的写法）</p></li><li><p>函数形式： typeof(x)</p></li></ol></blockquote><p>换言之，有括号和没有括号，得到的结果是一样的，所以我们直接使用运算符的写法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //数字型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;刘德华&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //字符串类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //布尔类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buy </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//未定义类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 number </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> buy) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><h2 id="十、-类型转换" tabindex="-1">十、 类型转换 <a class="header-anchor" href="#十、-类型转换" aria-label="Permalink to &quot;十、 类型转换&quot;">​</a></h2><h3 id="_1、为什么需要类型转换" tabindex="-1">1、为什么需要类型转换? <a class="header-anchor" href="#_1、为什么需要类型转换" aria-label="Permalink to &quot;1、为什么需要类型转换?&quot;">​</a></h3><p>JavaScript是弱数据类型： JavaScript也不知道变量到底属于那种数据类型，只有赋值了才清楚。</p><p><strong>坑</strong>： <strong>使用表单、prompt 获取过来的数据默认是字符串类型</strong>的，此时就不能直接简单的进行加法运算。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;100&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出结果 1000100</span></span></code></pre></div><p>此时需要转换变量的数据类型。</p><p>通俗来说，就是把一种数据类型的变量转换成我们需要的数据类型。</p><h3 id="_2、转换方法" tabindex="-1">2、转换方法 <a class="header-anchor" href="#_2、转换方法" aria-label="Permalink to &quot;2、转换方法&quot;">​</a></h3><h4 id="_2-1-隐式转换" tabindex="-1">2.1 隐式转换 <a class="header-anchor" href="#_2-1-隐式转换" aria-label="Permalink to &quot;2.1 隐式转换&quot;">​</a></h4><p><strong>定义:</strong></p><blockquote><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换。</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小书生&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 小书生2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//12(字符)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;5&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//number</span></span></code></pre></div><p><strong>规则：</strong></p><blockquote><p>+号两边只要有一个是字符串，都会把另外一个转成字符串</p><p>除了+以外的算术运算符 比如 - * / 等都会把数据转成数字类型</p></blockquote><p><strong>缺点：</strong></p><blockquote><p>转换类型不明确，靠经验才能总结</p></blockquote><p><strong>小技巧：</strong></p><blockquote><p>+号作为正号解析可以转换成数字型</p><p>任何数据和字符串相加结果都是字符串</p></blockquote><h4 id="_2-2-显示转换" tabindex="-1">2.2 显示转换 <a class="header-anchor" href="#_2-2-显示转换" aria-label="Permalink to &quot;2.2 显示转换&quot;">​</a></h4><p>编写程序时过度依靠系统内部的隐式转换是不严禁的，因为隐式转换规律并不清晰，大多是靠经验总结的规律。</p><p>为了避免因隐式转换带来的问题，通常根逻辑需要对数据进行显示转换。</p><p><strong>概念</strong> :自己写代码告诉系统该转成什么类型</p><p><strong>转换类型:</strong></p><h5 id="_1-转换为数字型" tabindex="-1"><strong>1. 转换为数字型</strong> <a class="header-anchor" href="#_1-转换为数字型" aria-label="Permalink to &quot;**1. 转换为数字型**&quot;">​</a></h5><h6 id="_1-1-number-数据" tabindex="-1"><strong>1. 1 Number(数据)</strong> <a class="header-anchor" href="#_1-1-number-数据" aria-label="Permalink to &quot;**1. 1 Number(数据)**&quot;">​</a></h6><blockquote><ul><li>转成数字类型</li><li>如果字符串内容里有非数字，转换失败时结果为 NaN（Not a Number）即不是一个数字</li><li>NaN也是number类型的数据，代表非数字</li></ul></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;小书生&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出  NaN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出的是数字(蓝色)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;输入年薪&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出的字符串 (黑色)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出的是数字(蓝色)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 方法二:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> month </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;输入月薪&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(month) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出的是数字(蓝色)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//方法三:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;输入年薪&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span></code></pre></div><h6 id="_1-2-parseint-数据-只保留整数" tabindex="-1">1.2 parseInt(数据) : 只保留整数 <a class="header-anchor" href="#_1-2-parseint-数据-只保留整数" aria-label="Permalink to &quot;1.2 parseInt(数据) : 只保留整数&quot;">​</a></h6><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;12.34px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc12.34px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 NaN</span></span></code></pre></div><h6 id="_1-3-parsefloat-数据-可以保留小数" tabindex="-1">1.3 parseFloat(数据) : 可以保留小数 <a class="header-anchor" href="#_1-3-parsefloat-数据-可以保留小数" aria-label="Permalink to &quot;1.3 parseFloat(数据) : 可以保留小数&quot;">​</a></h6><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;15.88px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出 15.88</span></span></code></pre></div><h5 id="_2-数字类型转换为字符串-变量-tostring" tabindex="-1"><strong>2. 数字类型转换为字符串 变量.toString()</strong> <a class="header-anchor" href="#_2-数字类型转换为字符串-变量-tostring" aria-label="Permalink to &quot;**2. 数字类型转换为字符串 变量.toString()**&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//10 数字</span></span></code></pre></div>`,67))])}const j=l(A,[["render",C]]);export{f as __pageData,j as default};
